pipeline {
    agent any
    options {
        timeout(time: 20, unit: 'MINUTES')
    }

    environment {
        AWS_REGION = 'us-east-1'  // Replace with your AWS region
        ECR_REGISTRY = 'my-repository'      // Replace with your ECR registry URL (e.g., <account_id>.dkr.ecr.<region>.amazonaws.com)
        URL_REGISTRY = '637423529262.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_NAME = 'app_amazon'          // Replace with your image name
      //  AWS_CREDENTIALS_ID = 'lil-ecr'
    }
    stages{
        // NPM dependencies
        stage('pull npm dependencies') {
            steps {
                sh 'npm install'
            }
        }
        // Run Unit test
        //stage('Run Unit Test') {
          //  steps {
               // sh 'npm test'
           // }
        //}
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            }
        }
        stage('build Docker Container') {
            steps {
                script {
                    // build image
                    docker.build("${URL_REGISTRY}/${IMAGE_NAME}:$BUILD_NUMBER")
                }
            }
        }
        stage('Trivy Scan (Aqua)') {
            steps {
                sh 'trivy image --format template --output trivy_report.html ${URL_REGISTRY}/${IMAGE_NAME}:$BUILD_NUMBER'
            }
       }
       stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Authenticate Docker with ECR
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        credentialsId: 'lilb-ecr-credentials-id',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        docker.withRegistry("${URL_REGISTRY}", "ecr:${AWS_REGION}") {
                            // Push Docker image to ECR
                            docker.image("${URL_REGISTRY}/${IMAGE_NAME}:$BUILD_NUMBER").push()
                        }
                    }
                }
            }
        }
        
    }
}
