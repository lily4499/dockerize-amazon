pipeline {
    agent any 

     options {
        timeout(time: 10, unit: 'MINUTES')
     }
    environment {
    ACR_NAME = "liliacr"
    ACR_LOGIN_SERVER = "liliacr.azurecr.io"
    IMAGE_NAME = "amazon_app"
    IMAGE_TAG = "v1.0.0"
    AZURE_SERVICE_PRINCIPAL_ID = credentials('lil-sp-client-id')
    AZURE_SERVICE_PRINCIPAL_PASSWORD = credentials('lil-sp-client-secret-id')
    AZURE_TENANT_ID = '98932122-35ff-47e5-a539-0942b55eb83c'
    }
    stages { 
        stage('SCM Checkout') {
            steps{
           git branch: 'main', url: 'https://github.com/lily4499/dockerize-amazon.git'
            }
        }
        // run sonarqube test
        stage('Run Sonarqube') {
            environment {
                scannerHome = tool 'ibt-sonarqube';
            }
            steps {
              withSonarQubeEnv(credentialsId: 'ibt-sonar', installationName: 'IBT sonarqube') {
                sh "${scannerHome}/bin/sonar-scanner"
              }
            }
        }
       // Building Docker Image 
       stage ('Build Docker image') {
        steps {
                script {
                    //dockerImage = docker.build registryUrl
                 def dockerImage = docker.build("${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}", '.') 
                }
            }
       } 
    // Uploading Docker images into ACR
        stage('Upload Image to ACR') {
         steps{   
             script {
                  withCredentials([usernamePassword(credentialsId: 'lili-acr-credentials-id', usernameVariable: 'SERVICE_PRINCIPAL_ID', passwordVariable: 'SERVICE_PRINCIPAL_PASSWORD')]) {
                        sh "az login --service-principal -u $SERVICE_PRINCIPAL_ID -p $SERVICE_PRINCIPAL_PASSWORD --tenant $AZURE_TENANT_ID"
              //   docker.withRegistry( "http://${ACR_NAME}.azurecr.io",  AZURE_CREDENTIALS ) {
               // dockerImage.push()
             		 sh " docker push ${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${IMAGE_TAG}"
                  }
              }
         }
      }

   //  Trigger seciond job to update deployment file 

	stage('Trigger ManifestUpdate') {
             steps{
                build job: 'update-amazon-manifest', parameters: [string(name: 'IMAGE_TAG', value: env.BUILD_NUMBER)]    
	   }
	}
		
    }
}
